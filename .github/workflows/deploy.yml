name: Deploy to Amazon ECS

on:
  push:
    branches:
      - main
  workflow_dispatch:
  workflow_run:
    workflows: ["Test"]
    branches: [main]
    types:
      - completed

env:
  AWS_REGION: us-east-1
  ECR_REPOSITORY: dev-poker-night-app
  ECS_CLUSTER: dev-poker-night-app-cluster
  ECS_SERVICE: dev-poker-night-app-service
  ECS_TASK_FAMILY: dev-poker-night-app
  SECRETS_NAME: dev-poker-night-app-environment-vars

jobs:
  build-and-deploy:
    name: Build and Deploy
    runs-on: ubuntu-latest
    # Only run if the workflow_run event is successful or if it's a direct trigger
    if: ${{ github.event_name != 'workflow_run' || github.event.workflow_run.conclusion == 'success' }}
    permissions:
      contents: read

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ github.sha }},${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

      # Update secrets in AWS Secrets Manager if needed
      - name: Update secrets in AWS Secrets Manager
        run: |
          # Get current secret value
          CURRENT_SECRET=$(aws secretsmanager get-secret-value --secret-id "${SECRETS_NAME}" --query 'SecretString' --output text)

          # Create a JSON object with updated values
          UPDATED_SECRET=$(echo $CURRENT_SECRET | jq \
            --arg db_url "${{ secrets.DATABASE_URL }}" \
            --arg jwt "${{ secrets.JWT_SECRET }}" \
            --arg g_id "${{ secrets.GOOGLE_CLIENT_ID }}" \
            --arg g_secret "${{ secrets.GOOGLE_CLIENT_SECRET }}" \
            --arg app_url "${{ secrets.NEXT_PUBLIC_APP_URL }}" \
            '. + {
              "DATABASE_URL": $db_url,
              "JWT_SECRET": $jwt,
              "GOOGLE_CLIENT_ID": $g_id,
              "GOOGLE_CLIENT_SECRET": $g_secret,
              "NEXT_PUBLIC_APP_URL": $app_url
            }')

          # Update the secret
          aws secretsmanager update-secret \
            --secret-id "${SECRETS_NAME}" \
            --secret-string "$UPDATED_SECRET" \
            --region ${{ env.AWS_REGION }}

      - name: Force new deployment with latest task definition
        run: |
          aws ecs update-service \
            --cluster ${{ env.ECS_CLUSTER }} \
            --service ${{ env.ECS_SERVICE }} \
            --force-new-deployment

      - name: Wait for service to stabilize
        run: |
          aws ecs wait services-stable \
            --cluster ${{ env.ECS_CLUSTER }} \
            --services ${{ env.ECS_SERVICE }}
