name: Deploy to Amazon ECS

on:
  push:
    branches:
      - main
  workflow_dispatch:
  workflow_run:
    workflows: ["Test"]
    branches: [main]
    types:
      - completed

env:
  AWS_REGION: us-east-1
  ECR_REPOSITORY: dev-poker-night-app
  ECS_CLUSTER: dev-poker-night-app-cluster
  ECS_SERVICE: dev-poker-night-app-service
  ECS_TASK_FAMILY: dev-poker-night-app-task

jobs:
  build-and-deploy:
    name: Build and Deploy
    runs-on: ubuntu-latest
    # Only run if the workflow_run event is successful or if it's a direct trigger
    if: ${{ github.event_name != 'workflow_run' || github.event.workflow_run.conclusion == 'success' }}
    permissions:
      contents: read

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ github.sha }},${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Get current task definition
        id: task-def
        run: |
          aws ecs describe-task-definition --task-definition ${{ env.ECS_TASK_FAMILY }} --query taskDefinition > task-definition.json
          echo "task-def-file=task-definition.json" >> $GITHUB_OUTPUT

      - name: Update task definition with new image
        id: update-task-def
        run: |
          # Get the container name from the task definition
          CONTAINER_NAME=$(jq -r '.containerDefinitions[0].name' task-definition.json)

          # Update the image in the task definition
          jq --arg IMAGE "${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ github.sha }}" \
             '.containerDefinitions[0].image = $IMAGE' task-definition.json > updated-task-definition.json

          echo "container-name=$CONTAINER_NAME" >> $GITHUB_OUTPUT
          echo "updated-task-def-file=updated-task-definition.json" >> $GITHUB_OUTPUT

      - name: Register new task definition
        id: register-task-def
        run: |
          NEW_TASK_DEF_ARN=$(aws ecs register-task-definition --cli-input-json file://updated-task-definition.json --query 'taskDefinition.taskDefinitionArn' --output text)
          echo "task-def-arn=$NEW_TASK_DEF_ARN" >> $GITHUB_OUTPUT

      - name: Deploy to Amazon ECS
        run: |
          aws ecs update-service \
            --cluster ${{ env.ECS_CLUSTER }} \
            --service ${{ env.ECS_SERVICE }} \
            --task-definition ${{ steps.register-task-def.outputs.task-def-arn }} \
            --force-new-deployment

      - name: Wait for service to stabilize
        run: |
          aws ecs wait services-stable \
            --cluster ${{ env.ECS_CLUSTER }} \
            --services ${{ env.ECS_SERVICE }}
